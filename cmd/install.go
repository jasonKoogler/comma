package cmd

import (
	"fmt"
	"os"
	"path/filepath"

	"github.com/jasonKoogler/comma/internal/git"
	"github.com/spf13/cobra"
)

var installCmd = &cobra.Command{
	Use:   "install-hook",
	Short: "Install Comma as a prepare-commit-msg hook",
	RunE:  runInstall,
}

func runInstall(cmd *cobra.Command, args []string) error {
	repo, err := git.NewRepository(".")
	if err != nil {
		return fmt.Errorf("failed to open git repository: %w", err)
	}

	gitDir, err := repo.GetGitDir()
	if err != nil {
		return fmt.Errorf("failed to get git directory: %w", err)
	}

	hookPath := filepath.Join(gitDir, "hooks", "prepare-commit-msg")

	// Check if hook already exists
	if _, err := os.Stat(hookPath); err == nil {
		overwrite, err := promptYesNo("Hook already exists. Overwrite?")
		if err != nil {
			return err
		}
		if !overwrite {
			fmt.Println("Hook installation aborted.")
			return nil
		}
	}

	// Create hook script
	hookContent := `#!/bin/sh
# Comma prepare-commit-msg hook
# Generated by comma install-hook

# Skip if commit message is already provided (e.g., from merge, squash, etc.)
if [ -n "$2" ]; then
  exit 0
fi

# Generate commit message
COMMIT_MSG=$(comma generate --staged)

# Exit if generation failed
if [ $? -ne 0 ]; then
  echo "Failed to generate commit message. Continuing with manual commit."
  exit 0
fi

# Write to commit message file
echo "$COMMIT_MSG" > "$1"
`

	// Write hook file
	if err := os.WriteFile(hookPath, []byte(hookContent), 0755); err != nil {
		return fmt.Errorf("failed to write hook file: %w", err)
	}

	fmt.Println("âœ“ Hook installed successfully!")
	return nil
}
